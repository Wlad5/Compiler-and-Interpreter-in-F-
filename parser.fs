// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"


# 9 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FUNC
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | EQ
  | LPAR
  | RPAR
  | COMMA
  | SEMICOLON
  | ANDAND
  | BANGEQ
  | BARBAR
  | EQEQ
  | GT
  | GTEQ
  | LT
  | LTEQ
  | MINUS
  | PCT
  | PLUS
  | SLASH
  | STAR
  | NAME of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FUNC
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQ
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_ANDAND
    | TOKEN_BANGEQ
    | TOKEN_BARBAR
    | TOKEN_EQEQ
    | TOKEN_GT
    | TOKEN_GTEQ
    | TOKEN_LT
    | TOKEN_LTEQ
    | TOKEN_MINUS
    | TOKEN_PCT
    | TOKEN_PLUS
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_NAME
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_explist
    | NONTERM_names
    | NONTERM_namelist
    | NONTERM_def
    | NONTERM_defs
    | NONTERM_prog

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FUNC  -> 1 
  | LET  -> 2 
  | IN  -> 3 
  | IF  -> 4 
  | THEN  -> 5 
  | ELSE  -> 6 
  | EQ  -> 7 
  | LPAR  -> 8 
  | RPAR  -> 9 
  | COMMA  -> 10 
  | SEMICOLON  -> 11 
  | ANDAND  -> 12 
  | BANGEQ  -> 13 
  | BARBAR  -> 14 
  | EQEQ  -> 15 
  | GT  -> 16 
  | GTEQ  -> 17 
  | LT  -> 18 
  | LTEQ  -> 19 
  | MINUS  -> 20 
  | PCT  -> 21 
  | PLUS  -> 22 
  | SLASH  -> 23 
  | STAR  -> 24 
  | NAME _ -> 25 
  | INT _ -> 26 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FUNC 
  | 2 -> TOKEN_LET 
  | 3 -> TOKEN_IN 
  | 4 -> TOKEN_IF 
  | 5 -> TOKEN_THEN 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_EQ 
  | 8 -> TOKEN_LPAR 
  | 9 -> TOKEN_RPAR 
  | 10 -> TOKEN_COMMA 
  | 11 -> TOKEN_SEMICOLON 
  | 12 -> TOKEN_ANDAND 
  | 13 -> TOKEN_BANGEQ 
  | 14 -> TOKEN_BARBAR 
  | 15 -> TOKEN_EQEQ 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_GTEQ 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_LTEQ 
  | 20 -> TOKEN_MINUS 
  | 21 -> TOKEN_PCT 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_SLASH 
  | 24 -> TOKEN_STAR 
  | 25 -> TOKEN_NAME 
  | 26 -> TOKEN_INT 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_exp 
    | 2 -> NONTERM_exp 
    | 3 -> NONTERM_exp 
    | 4 -> NONTERM_exp 
    | 5 -> NONTERM_exp 
    | 6 -> NONTERM_exp 
    | 7 -> NONTERM_exp 
    | 8 -> NONTERM_exp 
    | 9 -> NONTERM_exp 
    | 10 -> NONTERM_exp 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp 
    | 13 -> NONTERM_exp 
    | 14 -> NONTERM_exp 
    | 15 -> NONTERM_exp 
    | 16 -> NONTERM_exp 
    | 17 -> NONTERM_exp 
    | 18 -> NONTERM_exp 
    | 19 -> NONTERM_exp 
    | 20 -> NONTERM_exp 
    | 21 -> NONTERM_exps 
    | 22 -> NONTERM_exps 
    | 23 -> NONTERM_explist 
    | 24 -> NONTERM_explist 
    | 25 -> NONTERM_names 
    | 26 -> NONTERM_names 
    | 27 -> NONTERM_namelist 
    | 28 -> NONTERM_namelist 
    | 29 -> NONTERM_def 
    | 30 -> NONTERM_defs 
    | 31 -> NONTERM_defs 
    | 32 -> NONTERM_prog 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FUNC  -> "FUNC" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EQ  -> "EQ" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | ANDAND  -> "ANDAND" 
  | BANGEQ  -> "BANGEQ" 
  | BARBAR  -> "BARBAR" 
  | EQEQ  -> "EQEQ" 
  | GT  -> "GT" 
  | GTEQ  -> "GTEQ" 
  | LT  -> "LT" 
  | LTEQ  -> "LTEQ" 
  | MINUS  -> "MINUS" 
  | PCT  -> "PCT" 
  | PLUS  -> "PLUS" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | NAME _ -> "NAME" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | BANGEQ  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | EQEQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTEQ  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PCT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 24us; 65535us; 27us; 4us; 28us; 5us; 29us; 6us; 30us; 7us; 31us; 8us; 32us; 9us; 33us; 10us; 34us; 11us; 35us; 12us; 36us; 13us; 37us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 18us; 43us; 24us; 48us; 19us; 49us; 20us; 50us; 21us; 51us; 22us; 52us; 23us; 54us; 24us; 65us; 25us; 69us; 26us; 1us; 65535us; 43us; 44us; 2us; 65535us; 43us; 53us; 54us; 55us; 1us; 65535us; 62us; 63us; 2us; 65535us; 58us; 59us; 62us; 56us; 2us; 65535us; 0us; 67us; 67us; 67us; 2us; 65535us; 0us; 69us; 67us; 68us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 26us; 28us; 31us; 33us; 36us; 39us; 42us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 18us; 14us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 17us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 19us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 19us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 20us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 20us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 20us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 23us; 24us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 29us; 14us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 32us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 22us; 1us; 24us; 1us; 24us; 1us; 26us; 2us; 27us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 24us; 39us; 54us; 69us; 84us; 99us; 114us; 129us; 144us; 159us; 174us; 189us; 204us; 219us; 234us; 249us; 264us; 279us; 294us; 309us; 325us; 340us; 355us; 357us; 359us; 361us; 363us; 365us; 367us; 369us; 371us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 436us; 438us; 440us; 442us; |]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|1us; 16414us; 1us; 60us; 0us; 49152us; 0us; 16385us; 1us; 16386us; 8us; 43us; 3us; 16387us; 21us; 31us; 23us; 30us; 24us; 29us; 3us; 16388us; 21us; 31us; 23us; 30us; 24us; 29us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 5us; 16392us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 5us; 16393us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 5us; 16394us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 5us; 16395us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 5us; 16396us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 5us; 16397us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 11us; 16398us; 13us; 33us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 12us; 16399us; 12us; 38us; 13us; 33us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 3us; 16400us; 21us; 31us; 23us; 30us; 24us; 29us; 14us; 32768us; 9us; 42us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 32768us; 3us; 49us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 13us; 16403us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 32768us; 5us; 51us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 32768us; 6us; 52us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 13us; 16404us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 16407us; 10us; 54us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 32768us; 11us; 66us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 14us; 32768us; 0us; 70us; 12us; 38us; 13us; 33us; 14us; 39us; 15us; 32us; 16us; 36us; 17us; 37us; 18us; 34us; 19us; 35us; 20us; 28us; 21us; 31us; 22us; 27us; 23us; 30us; 24us; 29us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 0us; 16401us; 6us; 16405us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 1us; 32768us; 9us; 45us; 0us; 16402us; 1us; 32768us; 25us; 47us; 1us; 32768us; 7us; 48us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 0us; 16406us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 0us; 16408us; 0us; 16410us; 1us; 16411us; 10us; 58us; 1us; 32768us; 25us; 57us; 0us; 16412us; 1us; 32768us; 25us; 61us; 1us; 32768us; 8us; 62us; 1us; 16409us; 25us; 57us; 1us; 32768us; 9us; 64us; 1us; 32768us; 7us; 65us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 0us; 16413us; 1us; 16414us; 1us; 60us; 0us; 16415us; 6us; 32768us; 2us; 46us; 4us; 50us; 8us; 41us; 20us; 40us; 25us; 3us; 26us; 2us; 0us; 16416us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 4us; 6us; 10us; 14us; 15us; 16us; 17us; 23us; 29us; 35us; 41us; 47us; 53us; 65us; 78us; 82us; 97us; 112us; 126us; 141us; 156us; 170us; 185us; 200us; 215us; 222us; 229us; 236us; 243us; 250us; 257us; 264us; 271us; 278us; 285us; 292us; 299us; 306us; 313us; 320us; 321us; 328us; 330us; 331us; 333us; 335us; 342us; 349us; 356us; 363us; 370us; 371us; 378us; 379us; 380us; 382us; 384us; 385us; 387us; 389us; 391us; 393us; 395us; 402us; 403us; 405us; 406us; 413us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 8us; 0us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 16408us; 16410us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 16415us; 65535us; 16416us; |]
let _fsyacc_reductions ()  =    [| 
# 260 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 269 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "parser.fsy"
                                                            Syntax.INT _1 
                   )
# 38 "parser.fsy"
                 : Syntax.exp));
# 280 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "parser.fsy"
                                                            match _1 with
                                                             | "true"  -> Syntax.BOOL true
                                                             | "false" -> Syntax.BOOL false
                                                             | "read"  -> Syntax.READ
                                                             | _       -> Syntax.VAR _1 
                   )
# 39 "parser.fsy"
                 : Syntax.exp));
# 295 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "parser.fsy"
                                                            Syntax.ADD(_1, _3) 
                   )
# 44 "parser.fsy"
                 : Syntax.exp));
# 307 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "parser.fsy"
                                                            Syntax.SUB(_1, _3) 
                   )
# 45 "parser.fsy"
                 : Syntax.exp));
# 319 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "parser.fsy"
                                                            Syntax.MUL(_1, _3) 
                   )
# 46 "parser.fsy"
                 : Syntax.exp));
# 331 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "parser.fsy"
                                                            Syntax.DIV(_1, _3) 
                   )
# 47 "parser.fsy"
                 : Syntax.exp));
# 343 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "parser.fsy"
                                                            Syntax.MOD(_1, _3) 
                   )
# 48 "parser.fsy"
                 : Syntax.exp));
# 355 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "parser.fsy"
                                                            Syntax.EQ(_1, _3)  
                   )
# 49 "parser.fsy"
                 : Syntax.exp));
# 367 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "parser.fsy"
                                                            Syntax.NEQ(_1, _3) 
                   )
# 50 "parser.fsy"
                 : Syntax.exp));
# 379 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "parser.fsy"
                                                            Syntax.LT(_1, _3)  
                   )
# 51 "parser.fsy"
                 : Syntax.exp));
# 391 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "parser.fsy"
                                                            Syntax.LTE(_1, _3) 
                   )
# 52 "parser.fsy"
                 : Syntax.exp));
# 403 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "parser.fsy"
                                                            Syntax.GT(_1, _3)  
                   )
# 53 "parser.fsy"
                 : Syntax.exp));
# 415 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "parser.fsy"
                                                            Syntax.GTE(_1, _3) 
                   )
# 54 "parser.fsy"
                 : Syntax.exp));
# 427 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "parser.fsy"
                                                            Syntax.AND(_1, _3) 
                   )
# 55 "parser.fsy"
                 : Syntax.exp));
# 439 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "parser.fsy"
                                                            Syntax.OR(_1, _3) 
                   )
# 56 "parser.fsy"
                 : Syntax.exp));
# 451 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "parser.fsy"
                                                            Syntax.NEG(_2) 
                   )
# 57 "parser.fsy"
                 : Syntax.exp));
# 462 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "parser.fsy"
                                                            _2 
                   )
# 58 "parser.fsy"
                 : Syntax.exp));
# 473 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "parser.fsy"
                                                            Syntax.CALL (_1, _3) 
                   )
# 59 "parser.fsy"
                 : Syntax.exp));
# 485 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Syntax.exp in
            let _6 = parseState.GetInput(6) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "parser.fsy"
                                                            Syntax.LET(_2, _4, _6) 
                   )
# 60 "parser.fsy"
                 : Syntax.exp));
# 498 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            let _4 = parseState.GetInput(4) :?> Syntax.exp in
            let _6 = parseState.GetInput(6) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "parser.fsy"
                                                            Syntax.IF(_2, _4, _6) 
                   )
# 61 "parser.fsy"
                 : Syntax.exp));
# 511 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "parser.fsy"
                                                            [] 
                   )
# 64 "parser.fsy"
                 : Syntax.exp list));
# 521 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "parser.fsy"
                                                            _1 
                   )
# 65 "parser.fsy"
                 : Syntax.exp list));
# 532 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "parser.fsy"
                                                            [_1] 
                   )
# 67 "parser.fsy"
                 : Syntax.exp list));
# 543 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.exp in
            let _3 = parseState.GetInput(3) :?> Syntax.exp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "parser.fsy"
                                                            _1 :: _3 
                   )
# 68 "parser.fsy"
                 : Syntax.exp list));
# 555 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "parser.fsy"
                                                            [] 
                   )
# 70 "parser.fsy"
                 : string list));
# 565 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "parser.fsy"
                                                            _1 
                   )
# 71 "parser.fsy"
                 : string list));
# 576 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "parser.fsy"
                                                            [_1] 
                   )
# 73 "parser.fsy"
                 : string list));
# 587 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "parser.fsy"
                                                            _1 :: _3 
                   )
# 74 "parser.fsy"
                 : string list));
# 599 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> string list in
            let _7 = parseState.GetInput(7) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "parser.fsy"
                                                            (_2, (_4, _7)) 
                   )
# 77 "parser.fsy"
                 : Syntax.funcdef));
# 612 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "parser.fsy"
                                                            [] 
                   )
# 79 "parser.fsy"
                 : Syntax.funcdef list));
# 622 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.funcdef in
            let _2 = parseState.GetInput(2) :?> Syntax.funcdef list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "parser.fsy"
                                                            _1 :: _2 
                   )
# 80 "parser.fsy"
                 : Syntax.funcdef list));
# 634 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.funcdef list in
            let _2 = parseState.GetInput(2) :?> Syntax.exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "parser.fsy"
                                                            (_1, _2) 
                   )
# 82 "parser.fsy"
                 : Syntax.program));
|]
# 647 "parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf : Syntax.program =
    engine lexer lexbuf 0 :?> _